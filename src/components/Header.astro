---
import HeroButton from "../icons/HeroButton.astro";
import IconMoon from "../icons/IconMoon.astro";
import IconSun from "../icons/IconSun.astro";

const { class: className, id } = Astro.props;
---

<header
  id={id}
  data-section={id}
  class={` ${className} shadow-md inset-x-0 top-0 z-50 md:relative md:shadow-none md:bg-transparent  pt-8 pb-4  dark:shadow-none `}
>
  <!-- Contenedor principal del menú de navegación -->
  <nav class="wrapper h-20 flex items-center justify-between">
    <a href="./" class="md:w-1/3 max-w-[178px]">
      <img
        src="../src/assets/logo.svg"
        class="dark:hidden"
        alt="logo"
        class="w-full"
      />
      <img
        src="../src/assets/logo.png"
        class="hidden dark:inline"
        alt="logo"
        class="w-full"
      />
    </a>

    <input type="checkbox" id="menu" class="peer hidden" />

    <label
      for="menu"
      class="bg-open-menu size-[51px] bg-cover bg-center cursor-pointer peer-checked:hidden md:hidden dark:text-day-main text-day-main"
    ></label>

    <div
      class="fixed inset-y-0 right-0 w-[406px] md:w-auto translate-x-full peer-checked:translate-x-0 transition-transform duration-300 z-40 md:static md:translate-x-0"
    >
      <ul
        class="absolute right-0 top-8 p-4 bg-day-main w-[60%] rounded-s-2xl h-max text-center grid gap-11 font-bold text-sm text-night-text
    md:w-max md:static md:bg-transparent md:p-0 md:grid-flow-col md:flex md:items-center md:text-day-text dark:md:text-night-text"
      >
        <li>
          <div class="flex justify-between items-center px-3 md:hidden">
            <HeroButton
              aria-label="btn-theme"
              id="toggle-theme"
              class="h-auto flex items-center bg-day-main border-2 p-1 w-auto rounded-full hover:bg-day-secondary hover:dark:bg-day-secondary transition-transform hover:rotate-180 dark:rotate-0 duration-100 ease-in-out"
            >
              <IconSun class="size-6 dark:hidden" />
              <IconMoon class="size-6 hidden dark:inline" />
            </HeroButton>

            <label
              for="menu"
              class="bg-close-menu size-10 bg-cover bg-center bg-day-main cursor-pointer duration-300 hover:rotate-90 z-50 md:hidden dark:text-day-main text-day-main"
            >
            </label>
          </div>
        </li>
        <li><a href="#about">About Us</a></li>
        <li><a href="#rooms">Our Rooms</a></li>
        <li><a href="#pure-care">Purr Care</a></li>
        <li><a href="#testimonial">Testimonial</a></li>
        <li class="hidden md:block">
          <HeroButton
            aria-label="btn-theme"
            id="toggle-themeMobile"
            class="h-auto flex items-center bg-day-main border-2 p-1 w-auto rounded-full hover:bg-day-secondary hover:dark:bg-day-secondary text-white transition-transform hover:rotate-180 dark:rotate-0 duration-100 ease-in-out"
          >
            <IconSun class="size-7 dark:hidden" />
            <IconMoon class="size-7 hidden dark:inline" />
          </HeroButton>
        </li>
        <li>
          <div class="mt-4 md:mt-0">
            <a
              href="#book-now"
              class="bg-day-secondary text-white rounded-xl px-4 py-3 text-xs"
              >BOOK NOW</a
            >
          </div>
        </li>
      </ul>
    </div>
  </nav>
</header>

<script>
  const themeToggle = document.getElementById("toggle-theme");
  const themetoggleMobile = document.getElementById("toggle-themeMobile");
  const htmlElement = document.documentElement;
  const storageKey = "theme"; // Clave para el almacenamiento local

  // Función para aplicar el tema
  function applyTheme(theme: string) {
    if (theme === "dark") {
      htmlElement.classList.add("dark");
      localStorage.setItem(storageKey, "dark");
    } else {
      htmlElement.classList.remove("dark");
      localStorage.setItem(storageKey, "light");
    }
  }

  // Obtener el tema guardado o el preferido por el sistema
  const savedTheme = localStorage.getItem(storageKey);
  if (savedTheme) {
    applyTheme(savedTheme);
  } else {
    const preferredTheme = window.matchMedia("(prefers-color-scheme: dark)")
      .matches
      ? "dark"
      : "light";
    applyTheme(preferredTheme);
  }

  // Escuchar cambios en el esquema de color del sistema
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (event) => {
      applyTheme(event.matches ? "dark" : "light");
    });

  // Alternar el tema manualmente con el botón
  if (themeToggle) {
    themeToggle.addEventListener("click", () => {
      const newTheme = htmlElement.classList.contains("dark")
        ? "light"
        : "dark";
      applyTheme(newTheme);
    });
  }
  if (themetoggleMobile) {
    themetoggleMobile.addEventListener("click", () => {
      const newTheme = htmlElement.classList.contains("dark")
        ? "light"
        : "dark";
      applyTheme(newTheme);
    });
  }
</script>
